Create database Fast_Logistics;

CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    address VARCHAR(100) NOT NULL,
    phone VARCHAR(20) NOT NULL
);

CREATE TABLE orders (
    order_id INT PRIMARY KEY,
    customer_id INT NOT NULL,
    order_date DATE NOT NULL,
    total_amount DECIMAL(10, 2) NOT NULL,
    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)
);

CREATE TABLE products (
    product_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    price DECIMAL(10, 2) NOT NULL
);

CREATE TABLE order_items (
    order_id INT NOT NULL,
    product_id INT NOT NULL,
    quantity INT NOT NULL,
    PRIMARY KEY (order_id, product_id),
    FOREIGN KEY (order_id) REFERENCES orders(order_id),
    FOREIGN KEY (product_id) REFERENCES products(product_id)
);

INSERT INTO customers VALUES
    (1, 'John Smith', '123 Main St, Anytown USA', '555-1234'),
    (2, 'Jane Doe', '456 Maple Ave, Anytown USA', '555-5678'),
    (3, 'Bob Johnson', '789 Oak Rd, Anytown USA', '555-9012');

INSERT INTO orders VALUES
    (1, 1, '2023-04-01', 100.00),
    (2, 2, '2023-04-02', 200.00),
    (3, 1, '2023-04-03', 300.00),
    (4, 3, '2023-04-04', 400.00),
    (5, 2, '2023-04-05', 500.00);

INSERT INTO products VALUES
    (1, 'Widget A', 10.00),
    (2, 'Widget B', 20.00),
    (3, 'Widget C', 30.00),
    (4, 'Widget D', 40.00),
    (5, 'Widget E', 50.00);

INSERT INTO order_items VALUES
    (1, 1, 5),
    (1, 2, 10),
    (2, 1, 2),
    (2, 3, 5),
    (3, 4, 8),
    (3, 5, 3),
    (4, 2, 7),
    (4, 4, 4),
    (4, 5, 2),
    (5, 1, 4),
    (5, 3, 6),
    (5, 5, 8);
    
   select * from customers;
   select * from orders;
   select * from products;
   select * from  order_items;
   
   -- Get a list of all customers and their total order amounts.
   select customers.name , sum(orders.total_amount) from customers
   join orders on customers.customer_id = orders.customer_id
   group by customers.name ;
   
-- Get a list of all products and the total quantity sold.
select products.name as product_name,sum(order_items.quantity) as total_quantity_sold from products
join order_items on products.product_id = order_items.product_id
group by products.name ;

-- Get a list of all orders and their details.
SELECT orders.order_id, customers.name AS customer_name, orders.order_date, orders.total_amount
FROM orders
JOIN customers ON orders.customer_id = customers.customer_id;

-- Find the top 5 customers who have spent the most money in total, along with their total spending

  SELECT c.name, total_spending
FROM customers c
INNER JOIN(SELECT customer_id, SUM(total_amount) AS total_spending
  FROM orders
  GROUP BY customer_id
  ORDER BY total_spending DESC
  LIMIT 5) t ON c.customer_id = t.customer_id;
  
  -- Find the total revenue generated by each product, sorted by the revenue in descending order.

SELECT products.name, total_revenue
FROM products 
INNER JOIN (
  SELECT products.product_id, SUM(quantity * price) AS total_revenue
  FROM order_items 
  INNER JOIN orders  ON order_items.order_id = orders.order_id
  INNER JOIN products  ON order_items.product_id = products.product_id
  GROUP BY product_id
  ORDER BY total_revenue DESC
) t ON products.product_id = t.product_id;

-- Find the average amount spent by customers on each order


SELECT orders.order_id, customers.name, AVG(orders.total_amount) AS avg_amount
FROM orders 
INNER JOIN customers  ON orders.customer_id = customers.customer_id
GROUP BY orders.order_id, customers.name;


-- Find the customers who have made more than one order and their respective order dates.

select customers.name,orders.order_date from customers
join orders on customers.customer_id = orders.customer_id
where customers.customer_id 
IN (select customer_id from orders group by customer_id
	having count(*) > 1 )
order by customers.name,orders.order_date;
 
 -- Find the orders that have more than one product and their respective product names.
SELECT o.order_id, p.name
FROM orders o
INNER JOIN (
  SELECT order_id
  FROM order_items
  GROUP BY order_id
  HAVING COUNT(*) > 1
) oi ON o.order_id = oi.order_id
INNER JOIN order_items oi2 ON o.order_id = oi2.order_id
INNER JOIN products p ON oi2.product_id = p.product_id
ORDER BY o.order_id, p.name;
